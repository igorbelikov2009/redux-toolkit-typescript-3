{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nexport const postAPI = createApi({\n  reducerPath: \"postAPI\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"http://localhost:5000/\"\n  }),\n  tagTypes: [\"Post\"],\n  endpoints: builder => ({\n    // Получение всех posts для вычисления значения totalCount для пагинации\n    // fetchAllPost: builder.query<IPost[], number | string | void>({\n    //   query: () => ({\n    //     url: \"/posts\",\n    //   }),\n    // }),\n    //\n    fetchAllPost: builder.query({\n      query: function () {\n        let limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return `posts?${limit && `_limit=${limit}`}`;\n      }\n    }),\n    // Получение постов постранично с учётом пагинации\n    getPostByPage: builder.query({\n      query: function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n        return {\n          url: \"/posts\",\n          params: {\n            _page: page\n          }\n        };\n      },\n      providesTags: result => [\"Post\"]\n    }),\n    // Создание post: ___\n    createPost: builder.mutation({\n      query: post => ({\n        url: \"/posts\",\n        method: \"POST\",\n        body: post\n      }),\n      invalidatesTags: [\"Post\"]\n    }),\n    // Обновление todo: ___\n    updatePost: builder.mutation({\n      query: post => ({\n        url: \"/posts\",\n        method: \"PUT\",\n        body: post\n      }),\n      invalidatesTags: [\"Post\"]\n    }),\n    // Удаление todo: ___\n    deletePosts: builder.mutation({\n      query: post => ({\n        url: `/posts/${post.id}`,\n        method: \"DELETE\"\n      }),\n      invalidatesTags: [\"Post\"]\n    })\n  })\n});\n\n// Нам необходимо зарегистрировать редюсер в store.ts\n// и, там же, добавить мидлвеер из нашего todoAPI","map":{"version":3,"names":["createApi","fetchBaseQuery","postAPI","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","fetchAllPost","query","limit","arguments","length","undefined","getPostByPage","page","url","params","_page","providesTags","result","createPost","mutation","post","method","body","invalidatesTags","updatePost","deletePosts","id"],"sources":["C:/Projects Ulbi/redux-toolkit-typescript-3/src/services/PostService.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\r\nimport { IPost } from \"../models/types\";\r\n\r\nexport const postAPI = createApi({\r\n  reducerPath: \"postAPI\",\r\n  baseQuery: fetchBaseQuery({ baseUrl: \"http://localhost:5000/\" }),\r\n  tagTypes: [\"Post\"],\r\n  endpoints: (builder) => ({\r\n    // Получение всех posts для вычисления значения totalCount для пагинации\r\n    // fetchAllPost: builder.query<IPost[], number | string | void>({\r\n    //   query: () => ({\r\n    //     url: \"/posts\",\r\n    //   }),\r\n    // }),\r\n    //\r\n    fetchAllPost: builder.query<IPost[], number | string | void>({\r\n      query: (limit = \"\") => `posts?${limit && `_limit=${limit}`}`,\r\n    }),\r\n    // Получение постов постранично с учётом пагинации\r\n    getPostByPage: builder.query<IPost[], number | void>({\r\n      query: (page: number = 2) => ({\r\n        url: \"/posts\",\r\n        params: {\r\n          _page: page,\r\n        },\r\n      }),\r\n      providesTags: (result) => [\"Post\"],\r\n    }),\r\n    // Создание post: ___\r\n    createPost: builder.mutation<IPost, IPost>({\r\n      query: (post) => ({\r\n        url: \"/posts\",\r\n        method: \"POST\",\r\n        body: post,\r\n      }),\r\n      invalidatesTags: [\"Post\"],\r\n    }),\r\n    // Обновление todo: ___\r\n    updatePost: builder.mutation<IPost, IPost>({\r\n      query: (post) => ({\r\n        url: \"/posts\",\r\n        method: \"PUT\",\r\n        body: post,\r\n      }),\r\n      invalidatesTags: [\"Post\"],\r\n    }),\r\n    // Удаление todo: ___\r\n    deletePosts: builder.mutation<IPost, IPost>({\r\n      query: (post) => ({\r\n        url: `/posts/${post.id}`,\r\n        method: \"DELETE\",\r\n      }),\r\n      invalidatesTags: [\"Post\"],\r\n    }),\r\n  }),\r\n});\r\n\r\n// Нам необходимо зарегистрировать редюсер в store.ts\r\n// и, там же, добавить мидлвеер из нашего todoAPI\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,mCAAmC;AAG7E,OAAO,MAAMC,OAAO,GAAGF,SAAS,CAAC;EAC/BG,WAAW,EAAE,SAAS;EACtBC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAAyB,CAAC,CAAC;EAChEC,QAAQ,EAAE,CAAC,MAAM,CAAC;EAClBC,SAAS,EAAGC,OAAO,KAAM;IACvB;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,YAAY,EAAED,OAAO,CAACE,KAAK,CAAkC;MAC3DA,KAAK,EAAE,SAAAA,CAAA;QAAA,IAACC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;QAAA,OAAM,SAAQD,KAAK,IAAK,UAASA,KAAM,EAAE,EAAC;MAAA;IAC9D,CAAC,CAAC;IACF;IACAI,aAAa,EAAEP,OAAO,CAACE,KAAK,CAAyB;MACnDA,KAAK,EAAE,SAAAA,CAAA;QAAA,IAACM,IAAY,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;QAAA,OAAM;UAC5BK,GAAG,EAAE,QAAQ;UACbC,MAAM,EAAE;YACNC,KAAK,EAAEH;UACT;QACF,CAAC;MAAA,CAAC;MACFI,YAAY,EAAGC,MAAM,IAAK,CAAC,MAAM;IACnC,CAAC,CAAC;IACF;IACAC,UAAU,EAAEd,OAAO,CAACe,QAAQ,CAAe;MACzCb,KAAK,EAAGc,IAAI,KAAM;QAChBP,GAAG,EAAE,QAAQ;QACbQ,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEF;MACR,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,MAAM;IAC1B,CAAC,CAAC;IACF;IACAC,UAAU,EAAEpB,OAAO,CAACe,QAAQ,CAAe;MACzCb,KAAK,EAAGc,IAAI,KAAM;QAChBP,GAAG,EAAE,QAAQ;QACbQ,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEF;MACR,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,MAAM;IAC1B,CAAC,CAAC;IACF;IACAE,WAAW,EAAErB,OAAO,CAACe,QAAQ,CAAe;MAC1Cb,KAAK,EAAGc,IAAI,KAAM;QAChBP,GAAG,EAAG,UAASO,IAAI,CAACM,EAAG,EAAC;QACxBL,MAAM,EAAE;MACV,CAAC,CAAC;MACFE,eAAe,EAAE,CAAC,MAAM;IAC1B,CAAC;EACH,CAAC;AACH,CAAC,CAAC;;AAEF;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
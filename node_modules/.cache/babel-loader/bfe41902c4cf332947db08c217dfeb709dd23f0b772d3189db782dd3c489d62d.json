{"ast":null,"code":"// RTK Query\n// Используем  createApi\n\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nexport const userAPI = createApi({\n  reducerPath: \"userApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"http://localhost:5000/\"\n  }),\n  tagTypes: [\"User\"],\n  endpoints: build => ({\n    fetchAllUsers: build.query({\n      query: () => ({\n        url: \"/users\"\n      })\n    }),\n    // Эндпоинт получения пользователей постранично - делаем пагинацию:___\n    getUsersPagination: build.query({\n      // Для пагинации соблюдаем последовательность page и limit\n      query: function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n        return {\n          url: \"/users\",\n          params: {\n            // Для пагинации соблюдаем последовательность page и limit\n            _page: page,\n            _limit: limit\n          }\n        };\n      },\n      providesTags: [\"User\"]\n    }),\n    // Создание пользователя: ___\n    createUser: build.mutation({\n      query: user => ({\n        url: \"/users\",\n        method: \"POST\",\n        body: user\n      }),\n      invalidatesTags: [\"User\"]\n    }),\n    // Обновление пользователя: ___\n    updateUser: build.mutation({\n      query: user => ({\n        url: `/users/${user.id}`,\n        method: \"PUT\",\n        body: user\n      }),\n      invalidatesTags: [\"User\"]\n    }),\n    // Удаление пользователя: ___\n    deleteUser: build.mutation({\n      query: user => ({\n        url: `/users/${user.id}`,\n        method: \"DELETE\"\n      }),\n      invalidatesTags: [\"User\"]\n    })\n  })\n});\n// Нам необходимо зарегистрировать редюсер в store.ts\n// и, там же, добавить мидлвеер из нашего userAPI","map":{"version":3,"names":["createApi","fetchBaseQuery","userAPI","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","build","fetchAllUsers","query","url","getUsersPagination","page","arguments","length","undefined","limit","params","_page","_limit","providesTags","createUser","mutation","user","method","body","invalidatesTags","updateUser","id","deleteUser"],"sources":["C:/Projects Ulbi/redux-toolkit-typescript-3/src/services/UserService.ts"],"sourcesContent":["// RTK Query\r\n// Используем  createApi\r\n\r\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\r\nimport { IUser } from \"../models/types\";\r\n\r\nexport const userAPI = createApi({\r\n  reducerPath: \"userApi\",\r\n  baseQuery: fetchBaseQuery({ baseUrl: \"http://localhost:5000/\" }),\r\n  tagTypes: [\"User\"],\r\n  endpoints: (build) => ({\r\n    fetchAllUsers: build.query<IUser[], number | void>({\r\n      query: () => ({\r\n        url: \"/users\",\r\n      }),\r\n    }),\r\n    // Эндпоинт получения пользователей постранично - делаем пагинацию:___\r\n    getUsersPagination: build.query<IUser[], number | void>({\r\n      // Для пагинации соблюдаем последовательность page и limit\r\n      query: (page: number = 1, limit: number = 5) => ({\r\n        url: \"/users\",\r\n        params: {\r\n          // Для пагинации соблюдаем последовательность page и limit\r\n          _page: page,\r\n          _limit: limit,\r\n        },\r\n      }),\r\n      providesTags: [\"User\"],\r\n    }),\r\n    // Создание пользователя: ___\r\n    createUser: build.mutation<IUser, IUser>({\r\n      query: (user) => ({\r\n        url: \"/users\",\r\n        method: \"POST\",\r\n        body: user,\r\n      }),\r\n      invalidatesTags: [\"User\"],\r\n    }),\r\n    // Обновление пользователя: ___\r\n    updateUser: build.mutation<IUser, IUser>({\r\n      query: (user) => ({\r\n        url: `/users/${user.id}`,\r\n        method: \"PUT\",\r\n        body: user,\r\n      }),\r\n      invalidatesTags: [\"User\"],\r\n    }),\r\n    // Удаление пользователя: ___\r\n    deleteUser: build.mutation<IUser, IUser>({\r\n      query: (user) => ({\r\n        url: `/users/${user.id}`,\r\n        method: \"DELETE\",\r\n      }),\r\n      invalidatesTags: [\"User\"],\r\n    }),\r\n  }),\r\n});\r\n// Нам необходимо зарегистрировать редюсер в store.ts\r\n// и, там же, добавить мидлвеер из нашего userAPI\r\n"],"mappings":"AAAA;AACA;;AAEA,SAASA,SAAS,EAAEC,cAAc,QAAQ,mCAAmC;AAG7E,OAAO,MAAMC,OAAO,GAAGF,SAAS,CAAC;EAC/BG,WAAW,EAAE,SAAS;EACtBC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAAyB,CAAC,CAAC;EAChEC,QAAQ,EAAE,CAAC,MAAM,CAAC;EAClBC,SAAS,EAAGC,KAAK,KAAM;IACrBC,aAAa,EAAED,KAAK,CAACE,KAAK,CAAyB;MACjDA,KAAK,EAAEA,CAAA,MAAO;QACZC,GAAG,EAAE;MACP,CAAC;IACH,CAAC,CAAC;IACF;IACAC,kBAAkB,EAAEJ,KAAK,CAACE,KAAK,CAAyB;MACtD;MACAA,KAAK,EAAE,SAAAA,CAAA;QAAA,IAACG,IAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;QAAA,IAAEG,KAAa,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;QAAA,OAAM;UAC/CH,GAAG,EAAE,QAAQ;UACbO,MAAM,EAAE;YACN;YACAC,KAAK,EAAEN,IAAI;YACXO,MAAM,EAAEH;UACV;QACF,CAAC;MAAA,CAAC;MACFI,YAAY,EAAE,CAAC,MAAM;IACvB,CAAC,CAAC;IACF;IACAC,UAAU,EAAEd,KAAK,CAACe,QAAQ,CAAe;MACvCb,KAAK,EAAGc,IAAI,KAAM;QAChBb,GAAG,EAAE,QAAQ;QACbc,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEF;MACR,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,MAAM;IAC1B,CAAC,CAAC;IACF;IACAC,UAAU,EAAEpB,KAAK,CAACe,QAAQ,CAAe;MACvCb,KAAK,EAAGc,IAAI,KAAM;QAChBb,GAAG,EAAG,UAASa,IAAI,CAACK,EAAG,EAAC;QACxBJ,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEF;MACR,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,MAAM;IAC1B,CAAC,CAAC;IACF;IACAG,UAAU,EAAEtB,KAAK,CAACe,QAAQ,CAAe;MACvCb,KAAK,EAAGc,IAAI,KAAM;QAChBb,GAAG,EAAG,UAASa,IAAI,CAACK,EAAG,EAAC;QACxBJ,MAAM,EAAE;MACV,CAAC,CAAC;MACFE,eAAe,EAAE,CAAC,MAAM;IAC1B,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AACF;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
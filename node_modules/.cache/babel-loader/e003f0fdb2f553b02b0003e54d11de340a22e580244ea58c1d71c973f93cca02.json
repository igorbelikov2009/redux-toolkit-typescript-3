{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchAsyncThunkUsers } from \"./ActionCreater\";\n\n// Создаём интерфейс для initialState для слайс-редюсера\n\n// Создаём объект initialState типа IUserState\n\nconst initialState = {\n  users: [],\n  isLoading: false,\n  error: \"\"\n};\n\n// Создаём редюсер-слайс при помощи функции createSlice()\nexport const userAsyncThunkSlice = createSlice({\n  name: \"userAsyncThunk\",\n  initialState: initialState,\n  reducers: {},\n  // Когда мы в ActionCreater.ts используем createAsyncThunk, то в редюсерсы\n  // записываем пустой объект: reducers: {},\n  // и создаём extraReducers, в нём для нас уже автоматически создаются\n  // три состояния: pending (в ожидании), rejected (отклоненный)\n  // и fulfilled (выполненный)\n  extraReducers: {\n    [fetchAsyncThunkUsers.pending.type]: state => {\n      state.isLoading = true;\n    },\n    [fetchAsyncThunkUsers.fulfilled.type]: (state, action) => {\n      state.isLoading = false;\n      state.error = \"\";\n      state.users = action.payload;\n    },\n    [fetchAsyncThunkUsers.rejected.type]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    }\n  }\n});\n\n// После создания слайса, мы можем вытащить из него отдельный редюсер\n// и отдельный экшен-креатер. Например:\n\nexport default userAsyncThunkSlice.reducer;","map":{"version":3,"names":["createSlice","fetchAsyncThunkUsers","initialState","users","isLoading","error","userAsyncThunkSlice","name","reducers","extraReducers","pending","type","state","fulfilled","action","payload","rejected","reducer"],"sources":["C:/Projects Ulbi/redux-toolkit-typescript-3/src/store/reducers/userAsyncThunkSlice.ts"],"sourcesContent":["import { IUser } from \"./../../models/types\";\r\nimport { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\r\nimport { fetchAsyncThunkUsers } from \"./ActionCreater\";\r\n\r\n// Создаём интерфейс для initialState для слайс-редюсера\r\ninterface IUserState {\r\n  users: IUser[];\r\n  isLoading: boolean;\r\n  error: string | undefined;\r\n}\r\n\r\n// Создаём объект initialState типа IUserState\r\n\r\nconst initialState: IUserState = {\r\n  users: [],\r\n  isLoading: false,\r\n  error: \"\",\r\n};\r\n\r\n// Создаём редюсер-слайс при помощи функции createSlice()\r\nexport const userAsyncThunkSlice = createSlice({\r\n  name: \"userAsyncThunk\",\r\n  initialState: initialState,\r\n  reducers: {},\r\n  // Когда мы в ActionCreater.ts используем createAsyncThunk, то в редюсерсы\r\n  // записываем пустой объект: reducers: {},\r\n  // и создаём extraReducers, в нём для нас уже автоматически создаются\r\n  // три состояния: pending (в ожидании), rejected (отклоненный)\r\n  // и fulfilled (выполненный)\r\n  extraReducers: {\r\n    [fetchAsyncThunkUsers.pending.type]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    [fetchAsyncThunkUsers.fulfilled.type]: (state, action: PayloadAction<IUser[]>) => {\r\n      state.isLoading = false;\r\n      state.error = \"\";\r\n      state.users = action.payload;\r\n    },\r\n    [fetchAsyncThunkUsers.rejected.type]: (state, action: PayloadAction<string>) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\n// После создания слайса, мы можем вытащить из него отдельный редюсер\r\n// и отдельный экшен-креатер. Например:\r\n\r\nexport default userAsyncThunkSlice.reducer;\r\n"],"mappings":"AACA,SAAwBA,WAAW,QAAQ,kBAAkB;AAC7D,SAASC,oBAAoB,QAAQ,iBAAiB;;AAEtD;;AAOA;;AAEA,MAAMC,YAAwB,GAAG;EAC/BC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAGN,WAAW,CAAC;EAC7CO,IAAI,EAAE,gBAAgB;EACtBL,YAAY,EAAEA,YAAY;EAC1BM,QAAQ,EAAE,CAAC,CAAC;EACZ;EACA;EACA;EACA;EACA;EACAC,aAAa,EAAE;IACb,CAACR,oBAAoB,CAACS,OAAO,CAACC,IAAI,GAAIC,KAAK,IAAK;MAC9CA,KAAK,CAACR,SAAS,GAAG,IAAI;IACxB,CAAC;IACD,CAACH,oBAAoB,CAACY,SAAS,CAACF,IAAI,GAAG,CAACC,KAAK,EAAEE,MAA8B,KAAK;MAChFF,KAAK,CAACR,SAAS,GAAG,KAAK;MACvBQ,KAAK,CAACP,KAAK,GAAG,EAAE;MAChBO,KAAK,CAACT,KAAK,GAAGW,MAAM,CAACC,OAAO;IAC9B,CAAC;IACD,CAACd,oBAAoB,CAACe,QAAQ,CAACL,IAAI,GAAG,CAACC,KAAK,EAAEE,MAA6B,KAAK;MAC9EF,KAAK,CAACR,SAAS,GAAG,KAAK;MACvBQ,KAAK,CAACP,KAAK,GAAGS,MAAM,CAACC,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;;AAEF;AACA;;AAEA,eAAeT,mBAAmB,CAACW,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
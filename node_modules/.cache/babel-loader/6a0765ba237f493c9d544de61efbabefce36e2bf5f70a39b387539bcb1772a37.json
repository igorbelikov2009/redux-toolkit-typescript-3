{"ast":null,"code":"import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport userReducer from \"./reducers/UserSlice\";\nimport userAsyncThunkReducer from \"./reducers/userAsyncThunkSlice\";\n\n// Создаём корневой редюсер, состоящий из комбинации всех редюсеров\nconst rootReducer = combineReducers({\n  userReducer,\n  userAsyncThunkReducer\n});\n\n// Создаём функцию setupStore, с помощью её мы будем конфигурировать\n// наше редакс-хранилище. Без использования toolkit мы использовали\n// createReducer. Сейчас используем configureStore().\nexport const setupStore = () => {\n  return configureStore({\n    reducer: rootReducer,\n    // Добавляем к дефолтному мидлвееру, методом concat(), мидлвеер из нашего postAPI.\n    // Затем, методом concat(), добавляем мидлвеер из нашего todoAPI\n    // Затем, методом concat(), добавляем мидлвеер из нашего commentAPI\n    middleware: getDefaultMiddleware => getDefaultMiddleware()\n  });\n};\n\n// Три базовых типа, которые нам в дальнейшей работе понадобятся\n// Нам необходимо получить тип нашего состояния\n// Так же получим тип самого стора, с помощью ретюрнтайп\n// Так же получим тип dispatch нашего хранилища. Определив тип диспатча,\n// мы не сможем задиспачить те экшены, которые мы не определили","map":{"version":3,"names":["combineReducers","configureStore","userReducer","userAsyncThunkReducer","rootReducer","setupStore","reducer","middleware","getDefaultMiddleware"],"sources":["C:/Projects Ulbi/redux-toolkit-typescript-3/src/store/store.ts"],"sourcesContent":["import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\nimport userReducer from \"./reducers/UserSlice\";\r\nimport userAsyncThunkReducer from \"./reducers/userAsyncThunkSlice\";\r\n\r\n// Создаём корневой редюсер, состоящий из комбинации всех редюсеров\r\nconst rootReducer = combineReducers({\r\n  userReducer,\r\n  userAsyncThunkReducer,\r\n});\r\n\r\n// Создаём функцию setupStore, с помощью её мы будем конфигурировать\r\n// наше редакс-хранилище. Без использования toolkit мы использовали\r\n// createReducer. Сейчас используем configureStore().\r\nexport const setupStore = () => {\r\n  return configureStore({\r\n    reducer: rootReducer,\r\n\r\n    // Добавляем к дефолтному мидлвееру, методом concat(), мидлвеер из нашего postAPI.\r\n    // Затем, методом concat(), добавляем мидлвеер из нашего todoAPI\r\n    // Затем, методом concat(), добавляем мидлвеер из нашего commentAPI\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware(),\r\n  });\r\n};\r\n\r\n// Три базовых типа, которые нам в дальнейшей работе понадобятся\r\n// Нам необходимо получить тип нашего состояния\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\n// Так же получим тип самого стора, с помощью ретюрнтайп\r\nexport type AppStore = ReturnType<typeof setupStore>;\r\n\r\n// Так же получим тип dispatch нашего хранилища. Определив тип диспатча,\r\n// мы не сможем задиспачить те экшены, которые мы не определили\r\nexport type AppDispacth = AppStore[\"dispatch\"];\r\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,cAAc,QAAQ,kBAAkB;AAClE,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,qBAAqB,MAAM,gCAAgC;;AAElE;AACA,MAAMC,WAAW,GAAGJ,eAAe,CAAC;EAClCE,WAAW;EACXC;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA,OAAO,MAAME,UAAU,GAAGA,CAAA,KAAM;EAC9B,OAAOJ,cAAc,CAAC;IACpBK,OAAO,EAAEF,WAAW;IAEpB;IACA;IACA;IACAG,UAAU,EAAGC,oBAAoB,IAAKA,oBAAoB,CAAC;EAC7D,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AAGA;AAGA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useDispatch, useSelector } from \"react-redux\";\n// Базовые типы,\n// которые мы получали в файле store.ts\n\n// По сути, это обычный useDispatch, который мы возвращаем, но здесь у нас происходит\n// типизация. Будем использовать типизированный диспатч.\nexport const useAppDispanch = () => {\n  _s();\n  return useDispatch();\n};\n\n// Аналогично, это будет хук useSelector, но типизированный. Для этого используем\n// специальный тип TypedUseSelectorHook, и туда передаём RootState, который мы получали\n// в файле store.ts\n_s(useAppDispanch, \"jI3HA1r1Cumjdbu14H7G+TUj798=\", false, function () {\n  return [useDispatch];\n});\nexport const useAppSelector = useSelector;","map":{"version":3,"names":["useDispatch","useSelector","useAppDispanch","_s","useAppSelector"],"sources":["C:/Projects Ulbi/redux-toolkit-typescript-3/src/hooks/redux.ts"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispacth, RootState } from \"../store/store\"; // Базовые типы,\r\n// которые мы получали в файле store.ts\r\n\r\n// По сути, это обычный useDispatch, который мы возвращаем, но здесь у нас происходит\r\n// типизация. Будем использовать типизированный диспатч.\r\nexport const useAppDispanch = () => useDispatch<AppDispacth>();\r\n\r\n// Аналогично, это будет хук useSelector, но типизированный. Для этого используем\r\n// специальный тип TypedUseSelectorHook, и туда передаём RootState, который мы получали\r\n// в файле store.ts\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n"],"mappings":";AAAA,SAA+BA,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACnB;AACzD;;AAEA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMH,WAAW,CAAc,CAAC;AAAA;;AAE9D;AACA;AACA;AAAAG,EAAA,CAJaD,cAAc;EAAA,QAASF,WAAW;AAAA;AAK/C,OAAO,MAAMI,cAA+C,GAAGH,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query\";\nexport const commentApi = createApi({\n  reducerPath: \"commentApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"http://localhost:5000/\"\n  }),\n  tagTypes: [\"Comment\"],\n  endpoints: builder => ({\n    fetchAllComments: builder.query({\n      query: function () {\n        let limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return `comments?${limit && `_limit${limit}`}`;\n      },\n      // //==========================================================================\n      // так тоже работает\n      // query: (limit: number | string = \"10\") => ({\n      //   url: \"/comments\",\n      //   params: {\n      //     _limit: limit,\n      //   },\n      // }),\n      // //==========================================================================\n      providesTags: result => [\"Comment\"]\n    }),\n    // Эндпоинт создания коммента:_____\n    createComment: builder.mutation({\n      query: comment => ({\n        url: \"/comments\",\n        method: \"POST\",\n        body: comment\n      }),\n      invalidatesTags: [\"Comment\"]\n    }),\n    // Эндпоинт обновления коммента:_____\n    updateComment: builder.mutation({\n      query: comment => ({\n        url: `/comments/${comment.id}`,\n        method: \"POST\",\n        body: comment\n      }),\n      invalidatesTags: [\"Comment\"]\n    }),\n    // Эндпоинт удаления коммента:_____\n    deleteComment: builder.mutation({\n      query: comment => ({\n        url: `/comments/${comment.id}`,\n        method: \"DELETE\"\n      }),\n      invalidatesTags: [\"Comment\"]\n    })\n  })\n});\n\n// Нам необходимо зарегистрировать редюсер в store.ts\n// и, там же, добавить мидлвеер из нашего commentAPI","map":{"version":3,"names":["createApi","fetchBaseQuery","commentApi","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","fetchAllComments","query","limit","arguments","length","undefined","providesTags","result","createComment","mutation","comment","url","method","body","invalidatesTags","updateComment","id","deleteComment"],"sources":["C:/Projects Ulbi/redux-toolkit-typescript-3/src/services/CommentService.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query\";\r\nimport { IComment } from \"../models/types\";\r\n\r\nexport const commentApi = createApi({\r\n  reducerPath: \"commentApi\",\r\n  baseQuery: fetchBaseQuery({ baseUrl: \"http://localhost:5000/\" }),\r\n  tagTypes: [\"Comment\"],\r\n  endpoints: (builder) => ({\r\n    fetchAllComments: builder.query<IComment[], number | string>({\r\n      query: (limit: number | string = \"\") => `comments?${limit && `_limit${limit}`}`,\r\n      // //==========================================================================\r\n      // так тоже работает\r\n      // query: (limit: number | string = \"10\") => ({\r\n      //   url: \"/comments\",\r\n      //   params: {\r\n      //     _limit: limit,\r\n      //   },\r\n      // }),\r\n      // //==========================================================================\r\n      providesTags: (result) => [\"Comment\"],\r\n    }),\r\n    // Эндпоинт создания коммента:_____\r\n    createComment: builder.mutation<IComment, IComment>({\r\n      query: (comment) => ({\r\n        url: \"/comments\",\r\n        method: \"POST\",\r\n        body: comment,\r\n      }),\r\n      invalidatesTags: [\"Comment\"],\r\n    }),\r\n    // Эндпоинт обновления коммента:_____\r\n    updateComment: builder.mutation<IComment, IComment>({\r\n      query: (comment) => ({\r\n        url: `/comments/${comment.id}`,\r\n        method: \"POST\",\r\n        body: comment,\r\n      }),\r\n      invalidatesTags: [\"Comment\"],\r\n    }),\r\n    // Эндпоинт удаления коммента:_____\r\n    deleteComment: builder.mutation<IComment, IComment>({\r\n      query: (comment) => ({\r\n        url: `/comments/${comment.id}`,\r\n        method: \"DELETE\",\r\n      }),\r\n      invalidatesTags: [\"Comment\"],\r\n    }),\r\n  }),\r\n});\r\n\r\n// Нам необходимо зарегистрировать редюсер в store.ts\r\n// и, там же, добавить мидлвеер из нашего commentAPI\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,6BAA6B;AAGvE,OAAO,MAAMC,UAAU,GAAGF,SAAS,CAAC;EAClCG,WAAW,EAAE,YAAY;EACzBC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAAyB,CAAC,CAAC;EAChEC,QAAQ,EAAE,CAAC,SAAS,CAAC;EACrBC,SAAS,EAAGC,OAAO,KAAM;IACvBC,gBAAgB,EAAED,OAAO,CAACE,KAAK,CAA8B;MAC3DA,KAAK,EAAE,SAAAA,CAAA;QAAA,IAACC,KAAsB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;QAAA,OAAM,YAAWD,KAAK,IAAK,SAAQA,KAAM,EAAE,EAAC;MAAA;MAC/E;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAI,YAAY,EAAGC,MAAM,IAAK,CAAC,SAAS;IACtC,CAAC,CAAC;IACF;IACAC,aAAa,EAAET,OAAO,CAACU,QAAQ,CAAqB;MAClDR,KAAK,EAAGS,OAAO,KAAM;QACnBC,GAAG,EAAE,WAAW;QAChBC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACR,CAAC,CAAC;MACFI,eAAe,EAAE,CAAC,SAAS;IAC7B,CAAC,CAAC;IACF;IACAC,aAAa,EAAEhB,OAAO,CAACU,QAAQ,CAAqB;MAClDR,KAAK,EAAGS,OAAO,KAAM;QACnBC,GAAG,EAAG,aAAYD,OAAO,CAACM,EAAG,EAAC;QAC9BJ,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACR,CAAC,CAAC;MACFI,eAAe,EAAE,CAAC,SAAS;IAC7B,CAAC,CAAC;IACF;IACAG,aAAa,EAAElB,OAAO,CAACU,QAAQ,CAAqB;MAClDR,KAAK,EAAGS,OAAO,KAAM;QACnBC,GAAG,EAAG,aAAYD,OAAO,CAACM,EAAG,EAAC;QAC9BJ,MAAM,EAAE;MACV,CAAC,CAAC;MACFE,eAAe,EAAE,CAAC,SAAS;IAC7B,CAAC;EACH,CAAC;AACH,CAAC,CAAC;;AAEF;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
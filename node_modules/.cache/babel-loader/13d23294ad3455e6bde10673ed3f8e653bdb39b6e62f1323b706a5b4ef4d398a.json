{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects Ulbi\\\\redux-toolkit-typescript-3\\\\src\\\\pages\\\\TodoApiPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { todoApi } from \"../services/TodoService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TodoApiPage = () => {\n  _s();\n  const {\n    data: totalCountElem\n  } = todoApi.useGetAllTodosQuery();\n  let totalCount = 0;\n  if (totalCountElem) {\n    totalCount = totalCountElem.length;\n  }\n\n  // Получаем данные по параметрам, установленным в postPaginationAPI в эндпоинте:\n  // getPostsPagination: query: (page: number = 1, limit: number = 10)\n  const [page, setPage] = useState(1);\n  const [limit, setLimit] = useState(10);\n  // Вычисляем количество страниц\n  let countPage = Math.ceil(totalCount / limit);\n  // Создаём массив pages[], состоящий из нумерации страниц, типа const pages = [1, 2, 3, 4, 5];\n  // Этот массив нужен нам для пагинации\n  const pages = [];\n  for (let i = 0; i < countPage; i++) {\n    pages.push(i + 1);\n  }\n\n  // Получаем список дел постранично.\n  const {\n    data: todos,\n    error,\n    isLoading\n  } = todoApi.useGetTodoByPageQuery(page);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"card mt-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"containerButton\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"textCenter\",\n          children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0434\\u0435\\u043B \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0435\\u0439 \\u0438\\u0437 todoAPI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" \\u0418\\u0434\\u0451\\u0442 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [error && /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: \" \\u041F\\u0440\\u043E\\u0438\\u0437\\u043E\\u0448\\u043B\\u0430 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0435. \"\n              }, void 0, false)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 17\n            }, this), \" \"]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoApiPage, \"jaYzo9mDk/+InEAqUYhLhrCH9ao=\", false, function () {\n  return [todoApi.useGetAllTodosQuery, todoApi.useGetTodoByPageQuery];\n});\n_c = TodoApiPage;\nexport default TodoApiPage;\nvar _c;\n$RefreshReg$(_c, \"TodoApiPage\");","map":{"version":3,"names":["React","useState","Container","Row","todoApi","jsxDEV","_jsxDEV","Fragment","_Fragment","TodoApiPage","_s","data","totalCountElem","useGetAllTodosQuery","totalCount","length","page","setPage","limit","setLimit","countPage","Math","ceil","pages","i","push","todos","error","isLoading","useGetTodoByPageQuery","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Projects Ulbi/redux-toolkit-typescript-3/src/pages/TodoApiPage.tsx"],"sourcesContent":["import React, { FC, useState } from \"react\";\r\nimport { Container, Row, Button } from \"react-bootstrap\";\r\nimport { todoApi } from \"../services/TodoService\";\r\nimport TodoItem from \"../components/items/TodoItem\";\r\nimport { IFilter, ITodo, IOption } from \"../models/types\";\r\nimport PaginationButtons from \"../components/ui/PaginationButtons\";\r\nimport SortFilter from \"../components/SortFilter\";\r\n\r\nconst TodoApiPage = () => {\r\n  const { data: totalCountElem } = todoApi.useGetAllTodosQuery();\r\n  let totalCount = 0;\r\n\r\n  if (totalCountElem) {\r\n    totalCount = totalCountElem.length;\r\n  }\r\n\r\n  // Получаем данные по параметрам, установленным в postPaginationAPI в эндпоинте:\r\n  // getPostsPagination: query: (page: number = 1, limit: number = 10)\r\n  const [page, setPage] = useState<number>(1);\r\n  const [limit, setLimit] = useState<number>(10);\r\n  // Вычисляем количество страниц\r\n  let countPage: number = Math.ceil(totalCount / limit);\r\n  // Создаём массив pages[], состоящий из нумерации страниц, типа const pages = [1, 2, 3, 4, 5];\r\n  // Этот массив нужен нам для пагинации\r\n  const pages: number[] = [];\r\n  for (let i = 0; i < countPage; i++) {\r\n    pages.push(i + 1);\r\n  }\r\n\r\n  // Получаем список дел постранично.\r\n  const { data: todos, error, isLoading } = todoApi.useGetTodoByPageQuery(page);\r\n\r\n  return (\r\n    <Container className=\"card mt-6\">\r\n      <div className=\"containerButton\"></div>\r\n      <Row>\r\n        <div>\r\n          <h1 className=\"textCenter\">Список дел пользователей из todoAPI</h1>\r\n          {isLoading && <h1> Идёт загрузка</h1>}\r\n\r\n          <div>\r\n            <>\r\n              {error && (\r\n                <h1>\r\n                  <> Произошла ошибка при загрузке. </>\r\n                </h1>\r\n              )}{\" \"}\r\n            </>\r\n          </div>\r\n        </div>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TodoApiPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAQC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,EAAEC,GAAG,QAAgB,iBAAiB;AACxD,SAASC,OAAO,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAMlD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IAAEC,IAAI,EAAEC;EAAe,CAAC,GAAGR,OAAO,CAACS,mBAAmB,CAAC,CAAC;EAC9D,IAAIC,UAAU,GAAG,CAAC;EAElB,IAAIF,cAAc,EAAE;IAClBE,UAAU,GAAGF,cAAc,CAACG,MAAM;EACpC;;EAEA;EACA;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAS,CAAC,CAAC;EAC3C,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAS,EAAE,CAAC;EAC9C;EACA,IAAImB,SAAiB,GAAGC,IAAI,CAACC,IAAI,CAACR,UAAU,GAAGI,KAAK,CAAC;EACrD;EACA;EACA,MAAMK,KAAe,GAAG,EAAE;EAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,SAAS,EAAEI,CAAC,EAAE,EAAE;IAClCD,KAAK,CAACE,IAAI,CAACD,CAAC,GAAG,CAAC,CAAC;EACnB;;EAEA;EACA,MAAM;IAAEb,IAAI,EAAEe,KAAK;IAAEC,KAAK;IAAEC;EAAU,CAAC,GAAGxB,OAAO,CAACyB,qBAAqB,CAACb,IAAI,CAAC;EAE7E,oBACEV,OAAA,CAACJ,SAAS;IAAC4B,SAAS,EAAC,WAAW;IAAAC,QAAA,gBAC9BzB,OAAA;MAAKwB,SAAS,EAAC;IAAiB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACvC7B,OAAA,CAACH,GAAG;MAAA4B,QAAA,eACFzB,OAAA;QAAAyB,QAAA,gBACEzB,OAAA;UAAIwB,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAmC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAClEP,SAAS,iBAAItB,OAAA;UAAAyB,QAAA,EAAI;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAErC7B,OAAA;UAAAyB,QAAA,eACEzB,OAAA,CAAAE,SAAA;YAAAuB,QAAA,GACGJ,KAAK,iBACJrB,OAAA;cAAAyB,QAAA,eACEzB,OAAA,CAAAE,SAAA;gBAAAuB,QAAA,EAAE;cAAgC,gBAAE;YAAC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnC,CACL,EAAE,GAAG;UAAA,eACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEhB,CAAC;AAACzB,EAAA,CA7CID,WAAW;EAAA,QACkBL,OAAO,CAACS,mBAAmB,EAqBlBT,OAAO,CAACyB,qBAAqB;AAAA;AAAAO,EAAA,GAtBnE3B,WAAW;AA+CjB,eAAeA,WAAW;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
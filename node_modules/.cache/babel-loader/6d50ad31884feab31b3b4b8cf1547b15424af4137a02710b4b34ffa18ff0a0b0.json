{"ast":null,"code":"import axios from \"axios\";\nimport { userSlice } from \"./UserSlice\";\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const fetchUsers = async dispatch => {\n  try {\n    dispatch(userSlice.actions.usersFetching());\n    const response = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\n    dispatch(userSlice.actions.usersFetchingSuccess(response.data));\n  } catch (error) {\n    // dispatch(userSlice.actions.usersFetchingError(\"Произошла ошибка загрузки\"));\n    dispatch(userSlice.actions.usersFetchingError(error.message));\n  }\n};\n\n// Мы обработали три сценария: загрузку, успешную загрузку, загрузку с ошибкой.\n// redux-toolkit позволяет немного упростить обработку этих сценариев.\n// Для того, чтобы использовать redux-thunk, мы создавали функцию, которая принимает\n// аргументом dispatch и возвращает другую фунцию.\n\n//========================================================\n// Теперь мы можем воспользоваться\n// уже специальной надстройкой - фунцией createAsyncThunk(), которая это делает за нас.\n// Thunk - это функция, которая возвращается из другой функциию.\n// Первым аргументом мы указываем название этого асинхронного танка-thunk\n// (name: \"userAsyncThunk\", из UserAsyncThunkSlice.ts), а вторым аргументом передаём колбэк,\n// внутри которого мы будем реализовывать какие-то действия, в нашем случае\n// мы должны отправить запрос и вернуть какие-то данные.\n\nexport const fetchAsyncThunkUsers = createAsyncThunk(\"userAsyncThunk/fetchAll\", async (_, thunkAPI) => {\n  try {\n    const response = await axios.get(\"ttps://jsonplaceholder.typicode.com/users\");\n    return response.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(\"Не удалось загрузить список постов\");\n  }\n});","map":{"version":3,"names":["axios","userSlice","createAsyncThunk","fetchUsers","dispatch","actions","usersFetching","response","get","usersFetchingSuccess","data","error","usersFetchingError","message","fetchAsyncThunkUsers","_","thunkAPI","rejectWithValue"],"sources":["C:/Projects Ulbi/redux-toolkit-typescript-3/src/store/reducers/ActionCreater.ts"],"sourcesContent":["import { IUser } from \"../../models/types\";\r\nimport { AppDispacth } from \"../store\";\r\nimport axios from \"axios\";\r\nimport { userSlice } from \"./UserSlice\";\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchUsers = async (dispatch: AppDispacth) => {\r\n  try {\r\n    dispatch(userSlice.actions.usersFetching());\r\n    const response = await axios.get<IUser[]>(\"https://jsonplaceholder.typicode.com/users\");\r\n    dispatch(userSlice.actions.usersFetchingSuccess(response.data));\r\n  } catch (error: any) {\r\n    // dispatch(userSlice.actions.usersFetchingError(\"Произошла ошибка загрузки\"));\r\n    dispatch(userSlice.actions.usersFetchingError(error.message));\r\n  }\r\n};\r\n\r\n// Мы обработали три сценария: загрузку, успешную загрузку, загрузку с ошибкой.\r\n// redux-toolkit позволяет немного упростить обработку этих сценариев.\r\n// Для того, чтобы использовать redux-thunk, мы создавали функцию, которая принимает\r\n// аргументом dispatch и возвращает другую фунцию.\r\n\r\n//========================================================\r\n// Теперь мы можем воспользоваться\r\n// уже специальной надстройкой - фунцией createAsyncThunk(), которая это делает за нас.\r\n// Thunk - это функция, которая возвращается из другой функциию.\r\n// Первым аргументом мы указываем название этого асинхронного танка-thunk\r\n// (name: \"userAsyncThunk\", из UserAsyncThunkSlice.ts), а вторым аргументом передаём колбэк,\r\n// внутри которого мы будем реализовывать какие-то действия, в нашем случае\r\n// мы должны отправить запрос и вернуть какие-то данные.\r\n\r\nexport const fetchAsyncThunkUsers = createAsyncThunk(\"userAsyncThunk/fetchAll\", async (_, thunkAPI) => {\r\n  try {\r\n    const response = await axios.get<IUser[]>(\"ttps://jsonplaceholder.typicode.com/users\");\r\n    return response.data;\r\n  } catch (error: any) {\r\n    return thunkAPI.rejectWithValue(\"Не удалось загрузить список постов\");\r\n  }\r\n});\r\n"],"mappings":"AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,gBAAgB,QAAQ,kBAAkB;AAEnD,OAAO,MAAMC,UAAU,GAAG,MAAOC,QAAqB,IAAK;EACzD,IAAI;IACFA,QAAQ,CAACH,SAAS,CAACI,OAAO,CAACC,aAAa,CAAC,CAAC,CAAC;IAC3C,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAU,4CAA4C,CAAC;IACvFJ,QAAQ,CAACH,SAAS,CAACI,OAAO,CAACI,oBAAoB,CAACF,QAAQ,CAACG,IAAI,CAAC,CAAC;EACjE,CAAC,CAAC,OAAOC,KAAU,EAAE;IACnB;IACAP,QAAQ,CAACH,SAAS,CAACI,OAAO,CAACO,kBAAkB,CAACD,KAAK,CAACE,OAAO,CAAC,CAAC;EAC/D;AACF,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,oBAAoB,GAAGZ,gBAAgB,CAAC,yBAAyB,EAAE,OAAOa,CAAC,EAAEC,QAAQ,KAAK;EACrG,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAU,2CAA2C,CAAC;IACtF,OAAOD,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;IACnB,OAAOK,QAAQ,CAACC,eAAe,CAAC,oCAAoC,CAAC;EACvE;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
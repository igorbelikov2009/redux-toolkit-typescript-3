{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects Ulbi\\\\redux-toolkit-typescript-3\\\\src\\\\pages\\\\ProductApiPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { productAPI } from \"../services/ProductService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductApiPage = () => {\n  _s();\n  //================================================================================\n  // PAGINATION\n\n  const {\n    data\n  } = productAPI.useFetchAllPdoructsQuery();\n  let totalCount = 0;\n  if (data) {\n    totalCount = data.length;\n  }\n  // Получаем limit, page по параметрам, установленным в postPaginationAPI в эндпоинте:\n\n  const [page] = useState(1);\n  // Здесь, limit у нас взят так же из параметров, для расчётов. Здесь мы его не можем\n  // менять. В дальнейшем, limit надо будет получать из параметра запроса.\n  const [limit] = useState(10);\n  // Вычисляем количество страниц\n  let countPage = Math.ceil(totalCount / limit);\n  // console.log(countPage);\n  // Создаём массив pages[], состоящий из нумерации страниц, типа const pages = [1, 2, 3, 4, 5];\n  // Этот массив нужен нам для пагинации\n  const pages = [];\n  for (let i = 0; i < countPage; i++) {\n    pages.push(i + 1);\n  }\n  // Получаем массив products с сервера постранично\n\n  const {\n    data: products,\n    error,\n    isLoading\n  } = productAPI.useGetProductsPaginationQuery(page);\n  // PAGINATION\n  //================================================================================\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"ProductApiPage\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n};\n_s(ProductApiPage, \"XMJt3x9JOXfAZlu2zI/EuduCAIY=\", false, function () {\n  return [productAPI.useFetchAllPdoructsQuery, productAPI.useGetProductsPaginationQuery];\n});\n_c = ProductApiPage;\nexport default ProductApiPage;\nvar _c;\n$RefreshReg$(_c, \"ProductApiPage\");","map":{"version":3,"names":["React","useState","productAPI","jsxDEV","_jsxDEV","ProductApiPage","_s","data","useFetchAllPdoructsQuery","totalCount","length","page","limit","countPage","Math","ceil","pages","i","push","products","error","isLoading","useGetProductsPaginationQuery","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Projects Ulbi/redux-toolkit-typescript-3/src/pages/ProductApiPage.tsx"],"sourcesContent":["import React, { FC, useState, useMemo } from \"react\";\r\nimport { Container, Row, Button } from \"react-bootstrap\";\r\nimport { IFilter, IProduct, IOption } from \"../models/types\";\r\nimport { productAPI } from \"../services/ProductService\";\r\nimport PaginationButtons from \"../components/ui/PaginationButtons\";\r\nimport ProductItem from \"../components/items/ProductItem\";\r\nimport SortFilter from \"../components/SortFilter\";\r\n\r\nconst ProductApiPage = () => {\r\n  //================================================================================\r\n  // PAGINATION\r\n\r\n  const { data } = productAPI.useFetchAllPdoructsQuery();\r\n\r\n  let totalCount: number = 0;\r\n  if (data) {\r\n    totalCount = data.length;\r\n  }\r\n  // Получаем limit, page по параметрам, установленным в postPaginationAPI в эндпоинте:\r\n\r\n  const [page] = useState<number>(1);\r\n  // Здесь, limit у нас взят так же из параметров, для расчётов. Здесь мы его не можем\r\n  // менять. В дальнейшем, limit надо будет получать из параметра запроса.\r\n  const [limit] = useState<number>(10);\r\n  // Вычисляем количество страниц\r\n  let countPage: number = Math.ceil(totalCount / limit);\r\n  // console.log(countPage);\r\n  // Создаём массив pages[], состоящий из нумерации страниц, типа const pages = [1, 2, 3, 4, 5];\r\n  // Этот массив нужен нам для пагинации\r\n  const pages: number[] = [];\r\n  for (let i = 0; i < countPage; i++) {\r\n    pages.push(i + 1);\r\n  }\r\n  // Получаем массив products с сервера постранично\r\n\r\n  const { data: products, error, isLoading } = productAPI.useGetProductsPaginationQuery(page);\r\n  // PAGINATION\r\n  //================================================================================\r\n\r\n  return <div>ProductApiPage</div>;\r\n};\r\n\r\nexport default ProductApiPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAQC,QAAQ,QAAiB,OAAO;AAGpD,SAASC,UAAU,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAKxD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B;EACA;;EAEA,MAAM;IAAEC;EAAK,CAAC,GAAGL,UAAU,CAACM,wBAAwB,CAAC,CAAC;EAEtD,IAAIC,UAAkB,GAAG,CAAC;EAC1B,IAAIF,IAAI,EAAE;IACRE,UAAU,GAAGF,IAAI,CAACG,MAAM;EAC1B;EACA;;EAEA,MAAM,CAACC,IAAI,CAAC,GAAGV,QAAQ,CAAS,CAAC,CAAC;EAClC;EACA;EACA,MAAM,CAACW,KAAK,CAAC,GAAGX,QAAQ,CAAS,EAAE,CAAC;EACpC;EACA,IAAIY,SAAiB,GAAGC,IAAI,CAACC,IAAI,CAACN,UAAU,GAAGG,KAAK,CAAC;EACrD;EACA;EACA;EACA,MAAMI,KAAe,GAAG,EAAE;EAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,SAAS,EAAEI,CAAC,EAAE,EAAE;IAClCD,KAAK,CAACE,IAAI,CAACD,CAAC,GAAG,CAAC,CAAC;EACnB;EACA;;EAEA,MAAM;IAAEV,IAAI,EAAEY,QAAQ;IAAEC,KAAK;IAAEC;EAAU,CAAC,GAAGnB,UAAU,CAACoB,6BAA6B,CAACX,IAAI,CAAC;EAC3F;EACA;;EAEA,oBAAOP,OAAA;IAAAmB,QAAA,EAAK;EAAc;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAClC,CAAC;AAACrB,EAAA,CAhCID,cAAc;EAAA,QAIDH,UAAU,CAACM,wBAAwB,EAuBPN,UAAU,CAACoB,6BAA6B;AAAA;AAAAM,EAAA,GA3BjFvB,cAAc;AAkCpB,eAAeA,cAAc;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
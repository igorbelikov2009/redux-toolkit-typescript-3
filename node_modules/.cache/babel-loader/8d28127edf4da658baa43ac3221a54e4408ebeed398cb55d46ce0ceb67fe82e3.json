{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nexport const photoAPI = createApi({\n  reducerPath: \"photoAPI\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"http://localhost:5000/\"\n  }),\n  tagTypes: [\"Photo\"],\n  endpoints: builder => ({\n    // Эндпоинт получения всех фото, для получения их количества:___\n    fetchAllPhoto: builder.query({\n      query: () => ({\n        url: \"/photos\"\n      })\n    }),\n    // Эндпоинт получения фото постранично - делаем пагинацию:___\n    getAllPhotoByPage: builder.query({\n      // Для пагинации соблюдаем последовательность page и limit\n      query: function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n        return {\n          url: \"/photos\",\n          params: {\n            // Для пагинации соблюдаем последовательность page и limit\n            _page: page,\n            _limit: limit\n          }\n        };\n      },\n      providesTags: result => [\"Photo\"]\n    }),\n    // Эндпоинт создания фото:___\n    createPhoto: builder.mutation({\n      query: photo => ({\n        url: \"/photos\",\n        method: \"POST\",\n        body: photo\n      }),\n      invalidatesTags: [\"Photo\"]\n    }),\n    // Эндпоинт обновления фото:___\n    updatePhoto: builder.mutation({\n      query: photo => ({\n        url: `/photos/${photo.id}`,\n        method: \"PUT\",\n        body: photo\n      }),\n      invalidatesTags: [\"Photo\"]\n    }),\n    // Эндпоинт удаления фото:___\n    deletePhoto: builder.mutation({\n      query: photo => ({\n        url: `/photos/${photo.id}`\n      }),\n      invalidatesTags: [\"Photo\"]\n    })\n  })\n});\n\n//\n// Нам необходимо зарегистрировать редюсер в store.ts\n// и, там же, добавить мидлвеер из нашего photoAPI","map":{"version":3,"names":["createApi","fetchBaseQuery","photoAPI","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","fetchAllPhoto","query","url","getAllPhotoByPage","page","arguments","length","undefined","limit","params","_page","_limit","providesTags","result","createPhoto","mutation","photo","method","body","invalidatesTags","updatePhoto","id","deletePhoto"],"sources":["C:/Projects Ulbi/redux-toolkit-typescript-3/src/services/PhotoService.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\r\nimport { IPhoto } from \"../models/types\";\r\n\r\nexport const photoAPI = createApi({\r\n  reducerPath: \"photoAPI\",\r\n  baseQuery: fetchBaseQuery({ baseUrl: \"http://localhost:5000/\" }),\r\n  tagTypes: [\"Photo\"],\r\n  endpoints: (builder) => ({\r\n    // Эндпоинт получения всех фото, для получения их количества:___\r\n    fetchAllPhoto: builder.query<IPhoto[], number | void>({\r\n      query: () => ({\r\n        url: \"/photos\",\r\n      }),\r\n    }),\r\n    // Эндпоинт получения фото постранично - делаем пагинацию:___\r\n    getAllPhotoByPage: builder.query<IPhoto[], number | void>({\r\n      // Для пагинации соблюдаем последовательность page и limit\r\n      query: (page: number = 1, limit: number = 10) => ({\r\n        url: \"/photos\",\r\n        params: {\r\n          // Для пагинации соблюдаем последовательность page и limit\r\n          _page: page,\r\n          _limit: limit,\r\n        },\r\n      }),\r\n      providesTags: (result) => [\"Photo\"],\r\n    }),\r\n    // Эндпоинт создания фото:___\r\n    createPhoto: builder.mutation<IPhoto, IPhoto>({\r\n      query: (photo) => ({\r\n        url: \"/photos\",\r\n        method: \"POST\",\r\n        body: photo,\r\n      }),\r\n      invalidatesTags: [\"Photo\"],\r\n    }),\r\n    // Эндпоинт обновления фото:___\r\n    updatePhoto: builder.mutation<IPhoto, IPhoto>({\r\n      query: (photo) => ({\r\n        url: `/photos/${photo.id}`,\r\n        method: \"PUT\",\r\n        body: photo,\r\n      }),\r\n      invalidatesTags: [\"Photo\"],\r\n    }),\r\n    // Эндпоинт удаления фото:___\r\n    deletePhoto: builder.mutation<IPhoto, IPhoto>({\r\n      query: (photo) => ({\r\n        url: `/photos/${photo.id}`,\r\n      }),\r\n      invalidatesTags: [\"Photo\"],\r\n    }),\r\n  }),\r\n});\r\n\r\n//\r\n// Нам необходимо зарегистрировать редюсер в store.ts\r\n// и, там же, добавить мидлвеер из нашего photoAPI\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,mCAAmC;AAG7E,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EAChCG,WAAW,EAAE,UAAU;EACvBC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAAyB,CAAC,CAAC;EAChEC,QAAQ,EAAE,CAAC,OAAO,CAAC;EACnBC,SAAS,EAAGC,OAAO,KAAM;IACvB;IACAC,aAAa,EAAED,OAAO,CAACE,KAAK,CAA0B;MACpDA,KAAK,EAAEA,CAAA,MAAO;QACZC,GAAG,EAAE;MACP,CAAC;IACH,CAAC,CAAC;IACF;IACAC,iBAAiB,EAAEJ,OAAO,CAACE,KAAK,CAA0B;MACxD;MACAA,KAAK,EAAE,SAAAA,CAAA;QAAA,IAACG,IAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;QAAA,IAAEG,KAAa,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;QAAA,OAAM;UAChDH,GAAG,EAAE,SAAS;UACdO,MAAM,EAAE;YACN;YACAC,KAAK,EAAEN,IAAI;YACXO,MAAM,EAAEH;UACV;QACF,CAAC;MAAA,CAAC;MACFI,YAAY,EAAGC,MAAM,IAAK,CAAC,OAAO;IACpC,CAAC,CAAC;IACF;IACAC,WAAW,EAAEf,OAAO,CAACgB,QAAQ,CAAiB;MAC5Cd,KAAK,EAAGe,KAAK,KAAM;QACjBd,GAAG,EAAE,SAAS;QACde,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEF;MACR,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,OAAO;IAC3B,CAAC,CAAC;IACF;IACAC,WAAW,EAAErB,OAAO,CAACgB,QAAQ,CAAiB;MAC5Cd,KAAK,EAAGe,KAAK,KAAM;QACjBd,GAAG,EAAG,WAAUc,KAAK,CAACK,EAAG,EAAC;QAC1BJ,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEF;MACR,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,OAAO;IAC3B,CAAC,CAAC;IACF;IACAG,WAAW,EAAEvB,OAAO,CAACgB,QAAQ,CAAiB;MAC5Cd,KAAK,EAAGe,KAAK,KAAM;QACjBd,GAAG,EAAG,WAAUc,KAAK,CAACK,EAAG;MAC3B,CAAC,CAAC;MACFF,eAAe,EAAE,CAAC,OAAO;IAC3B,CAAC;EACH,CAAC;AACH,CAAC,CAAC;;AAEF;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
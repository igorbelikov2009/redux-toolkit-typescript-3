{"ast":null,"code":"// import { IProduct } from \"./../models/types\";\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nexport const productAPI = createApi({\n  reducerPath: \"productAPI\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"http://localhost:5000/\"\n  }),\n  tagTypes: [\"Product\"],\n  endpoints: build => ({\n    // Получаем все products разом, для получения общего количества\n    fetchAllPdoructs: build.query({\n      query: () => ({\n        url: \"/products\"\n      })\n    }),\n    // Получаем все products постранично - делаем пагинацию\n    getProductsPagination: build.query({\n      // Для пагинации соблюдаем последовательность page и limit\n      query: function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n        return {\n          url: \"/products\",\n          params: {\n            // Для пагинации соблюдаем последовательность page и limit\n            _page: page,\n            _limit: limit\n          }\n        };\n      },\n      providesTags: [\"Product\"]\n    }),\n    createProduct: build.mutation({\n      query: product => ({\n        url: \"/products\",\n        method: \"POST\",\n        body: product\n      }),\n      invalidatesTags: [\"Product\"]\n    }),\n    updateProduct: build.mutation({\n      query: product => ({\n        url: `/products/${product.id}`,\n        method: \"PUT\",\n        body: product\n      }),\n      invalidatesTags: [\"Product\"]\n    }),\n    deleteProduct: build.mutation({\n      query: product => ({\n        url: `/products/${product.id}`,\n        method: \"DELETE\"\n      }),\n      invalidatesTags: [\"Product\"]\n    })\n  })\n});","map":{"version":3,"names":["createApi","fetchBaseQuery","productAPI","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","build","fetchAllPdoructs","query","url","getProductsPagination","page","arguments","length","undefined","limit","params","_page","_limit","providesTags","createProduct","mutation","product","method","body","invalidatesTags","updateProduct","id","deleteProduct"],"sources":["C:/Projects Ulbi/redux-toolkit-typescript-3/src/services/ProductService.ts"],"sourcesContent":["// import { IProduct } from \"./../models/types\";\r\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\r\nimport { IProduct } from \"../models/types\";\r\n\r\nexport const productAPI = createApi({\r\n  reducerPath: \"productAPI\",\r\n  baseQuery: fetchBaseQuery({ baseUrl: \"http://localhost:5000/\" }),\r\n  tagTypes: [\"Product\"],\r\n  endpoints: (build) => ({\r\n    // Получаем все products разом, для получения общего количества\r\n    fetchAllPdoructs: build.query<IProduct[], number | void>({\r\n      query: () => ({\r\n        url: \"/products\",\r\n      }),\r\n    }),\r\n    // Получаем все products постранично - делаем пагинацию\r\n    getProductsPagination: build.query<IProduct[], number | void>({\r\n      // Для пагинации соблюдаем последовательность page и limit\r\n      query: (page: number = 1, limit: number = 10) => ({\r\n        url: \"/products\",\r\n        params: {\r\n          // Для пагинации соблюдаем последовательность page и limit\r\n          _page: page,\r\n          _limit: limit,\r\n        },\r\n      }),\r\n      providesTags: [\"Product\"],\r\n    }),\r\n    createProduct: build.mutation<IProduct, IProduct>({\r\n      query: (product) => ({\r\n        url: \"/products\",\r\n        method: \"POST\",\r\n        body: product,\r\n      }),\r\n      invalidatesTags: [\"Product\"],\r\n    }),\r\n    updateProduct: build.mutation<IProduct, IProduct>({\r\n      query: (product) => ({\r\n        url: `/products/${product.id}`,\r\n        method: \"PUT\",\r\n        body: product,\r\n      }),\r\n      invalidatesTags: [\"Product\"],\r\n    }),\r\n    deleteProduct: build.mutation<IProduct, IProduct>({\r\n      query: (product) => ({\r\n        url: `/products/${product.id}`,\r\n        method: \"DELETE\",\r\n      }),\r\n      invalidatesTags: [\"Product\"],\r\n    }),\r\n  }),\r\n});\r\n"],"mappings":"AAAA;AACA,SAASA,SAAS,EAAEC,cAAc,QAAQ,mCAAmC;AAG7E,OAAO,MAAMC,UAAU,GAAGF,SAAS,CAAC;EAClCG,WAAW,EAAE,YAAY;EACzBC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAAyB,CAAC,CAAC;EAChEC,QAAQ,EAAE,CAAC,SAAS,CAAC;EACrBC,SAAS,EAAGC,KAAK,KAAM;IACrB;IACAC,gBAAgB,EAAED,KAAK,CAACE,KAAK,CAA4B;MACvDA,KAAK,EAAEA,CAAA,MAAO;QACZC,GAAG,EAAE;MACP,CAAC;IACH,CAAC,CAAC;IACF;IACAC,qBAAqB,EAAEJ,KAAK,CAACE,KAAK,CAA4B;MAC5D;MACAA,KAAK,EAAE,SAAAA,CAAA;QAAA,IAACG,IAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;QAAA,IAAEG,KAAa,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;QAAA,OAAM;UAChDH,GAAG,EAAE,WAAW;UAChBO,MAAM,EAAE;YACN;YACAC,KAAK,EAAEN,IAAI;YACXO,MAAM,EAAEH;UACV;QACF,CAAC;MAAA,CAAC;MACFI,YAAY,EAAE,CAAC,SAAS;IAC1B,CAAC,CAAC;IACFC,aAAa,EAAEd,KAAK,CAACe,QAAQ,CAAqB;MAChDb,KAAK,EAAGc,OAAO,KAAM;QACnBb,GAAG,EAAE,WAAW;QAChBc,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEF;MACR,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,SAAS;IAC7B,CAAC,CAAC;IACFC,aAAa,EAAEpB,KAAK,CAACe,QAAQ,CAAqB;MAChDb,KAAK,EAAGc,OAAO,KAAM;QACnBb,GAAG,EAAG,aAAYa,OAAO,CAACK,EAAG,EAAC;QAC9BJ,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEF;MACR,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,SAAS;IAC7B,CAAC,CAAC;IACFG,aAAa,EAAEtB,KAAK,CAACe,QAAQ,CAAqB;MAChDb,KAAK,EAAGc,OAAO,KAAM;QACnBb,GAAG,EAAG,aAAYa,OAAO,CAACK,EAAG,EAAC;QAC9BJ,MAAM,EAAE;MACV,CAAC,CAAC;MACFE,eAAe,EAAE,CAAC,SAAS;IAC7B,CAAC;EACH,CAAC;AACH,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}